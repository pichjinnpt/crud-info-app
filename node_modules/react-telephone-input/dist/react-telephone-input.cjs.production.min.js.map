{"version":3,"file":"react-telephone-input.cjs.production.min.js","sources":["../src/format_number.ts","../src/guessSelectedCountry.ts","../src/ReactTelephoneInput.tsx","../src/replace_country_code.ts","../src/number_validator.ts"],"sourcesContent":["import R from 'cramda';\n\nconst { first, tail } = R;\n\nfunction formatNumber(\n  text: string,\n  pattern: string | null,\n  autoFormat = false,\n) {\n  if (!text || text.length === 0) {\n    return '+';\n  }\n\n  // for all strings with length less than 3, just return it (1, 2 etc.)\n  // also return the same text if the selected country has no fixed format\n  if ((text && text.length < 2) || !pattern || !autoFormat) {\n    return `+${text}`;\n  }\n\n  const formattedObject = pattern.split('').reduce(\n    (acc, character) => {\n      if (acc.remainingText.length === 0) {\n        return acc;\n      }\n\n      if (character !== '.') {\n        return {\n          formattedText: acc.formattedText + character,\n          remainingText: acc.remainingText,\n        };\n      }\n\n      return {\n        formattedText: acc.formattedText + first(acc.remainingText),\n        remainingText: tail(acc.remainingText),\n      };\n    },\n    { formattedText: '', remainingText: text.split('') },\n  );\n  return formattedObject.formattedText + formattedObject.remainingText.join('');\n}\n\nexport default formatNumber;\n","import * as React from 'react';\n// memoize results based on the first 5/6 characters. That is all that matters\n\nimport R from 'cramda';\nimport countryData from 'country-telephone-data';\n\nconst { find, propEq, startsWith } = R;\nconst { allCountries, allCountryCodes } = countryData;\nimport { Country, Props } from './ReactTelephoneInput';\n\nexport default function guessSelectedCountry(\n  inputNumber: string,\n  props: Props,\n): Country {\n  const defaultCountry = props.defaultCountry!;\n  const onlyCountries = props.onlyCountries!;\n\n  const secondBestGuess =\n    find(propEq('iso2', defaultCountry), allCountries) || onlyCountries[0];\n\n  const inputNumberForCountries = inputNumber.substr(0, 4);\n  let bestGuess;\n\n  if (inputNumber.trim() !== '') {\n    bestGuess = onlyCountries.reduce(\n      (selectedCountry: Country, country: Country) => {\n        // if the country dialCode exists WITH area code\n\n        if (\n          allCountryCodes[inputNumberForCountries] &&\n          allCountryCodes[inputNumberForCountries][0] === country.iso2\n        ) {\n          return country;\n\n          // if the selected country dialCode is there with the area code\n        } else if (\n          allCountryCodes[inputNumberForCountries] &&\n          allCountryCodes[inputNumberForCountries][0] === selectedCountry.iso2\n        ) {\n          return selectedCountry;\n\n          // else do the original if statement\n        }\n        if (startsWith(country.dialCode, inputNumber)) {\n          if (country.dialCode.length > selectedCountry.dialCode.length) {\n            return country;\n          }\n          if (\n            country.dialCode.length === selectedCountry.dialCode.length &&\n            country.priority < selectedCountry.priority\n          ) {\n            return country;\n          }\n        }\n\n        return selectedCountry;\n      },\n      { dialCode: '', priority: 10001 },\n    );\n  } else {\n    return secondBestGuess;\n  }\n\n  if (!bestGuess || !bestGuess.name) {\n    return secondBestGuess;\n  }\n\n  return bestGuess;\n}\n","import R from 'cramda';\nimport VirtualList from 'react-tiny-virtual-list';\n\nimport debounce from 'debounce';\nimport memoize from 'lodash.memoize';\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport classNames from 'classnames';\nimport enhanceWithClickOutside from 'react-click-outside';\nimport countryData from 'country-telephone-data';\nimport formatNumber from './format_number';\nimport replaceCountryCode from './replace_country_code';\nimport isNumberValid from './number_validator';\nimport guessSelectedCountry from './guessSelectedCountry';\n\ntype Direction = 1 | -1;\ntype ISO2Name = string;\n\nexport interface Country {\n  name?: string;\n  iso2?: ISO2Name;\n  dialCode: string;\n  priority: number;\n  format?: string;\n}\n\ninterface DefaultProps {\n  autoFormat: boolean;\n  onlyCountries: Array<Country>;\n  defaultCountry: ISO2Name;\n  isValid: (inputNumber: string) => boolean;\n  flagsImagePath: string;\n  onEnterKeyPress: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  preferredCountries: Array<ISO2Name>;\n  disabled: boolean;\n  placeholder: string;\n  autoComplete: string; // TODO: find the exact list of acceptable strings\n  required: boolean;\n  inputProps: React.HTMLProps<HTMLInputElement>;\n  buttonProps: React.HTMLProps<HTMLButtonElement>;\n  listItemClassName: string;\n  listStyle: React.CSSProperties;\n}\n\nexport type Props = {\n  value?: string;\n  initialValue?: string;\n  classNames: string;\n  className: string;\n  inputId: string;\n  onChange: (inputNumber: string, selectedCountry: Country) => void;\n  onFocus?: (inputNumber: string, selectedCountry: Country) => void;\n  onBlur?: (inputNumber: string, selectedCountry: Country) => void;\n  pattern: string;\n} & DefaultProps;\n\nconst { find, propEq, equals, findIndex, startsWith } = R;\n\nconst { allCountries, iso2Lookup } = countryData;\nlet isModernBrowser = true;\n\nif (typeof document !== 'undefined') {\n  isModernBrowser = Boolean(document.createElement('input').setSelectionRange);\n} else {\n  isModernBrowser = true;\n}\n\nconst keys = {\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  LEFT: 37,\n  ENTER: 13,\n  ESC: 27,\n  PLUS: 43,\n  A: 65,\n  Z: 90,\n  SPACE: 32,\n};\n\nfunction getDropdownListWidth() {\n  const defaultWidth = 400;\n  const horizontalMargin = 20;\n\n  if (window.innerWidth - horizontalMargin < defaultWidth) {\n    return window.innerWidth - horizontalMargin;\n  } else {\n    return defaultWidth;\n  }\n}\n\ninterface State {\n  firstCall: boolean;\n  preferredCountries: Array<Country>;\n  showDropDown: boolean;\n  queryString: string;\n  freezeSelection: boolean;\n  debouncedQueryStingSearcher: () => void;\n  selectedCountry?: Country;\n  highlightCountryIndex: number;\n  formattedNumber: string;\n}\n\nexport class ReactTelephoneInput extends Component<Props, State> {\n  static defaultProps = {\n    autoFormat: true,\n    onlyCountries: allCountries,\n    defaultCountry: allCountries[0].iso2,\n    isValid: isNumberValid,\n    flagsImagePath: 'flags.png',\n    onEnterKeyPress() {},\n    preferredCountries: [],\n    disabled: false,\n    placeholder: '+1 (702) 123-4567',\n    autoComplete: 'tel',\n    required: false,\n    inputProps: {},\n    buttonProps: {},\n    listItemClassName: 'country',\n    listStyle: {\n      zIndex: 20,\n      backgroundColor: 'white',\n    },\n  };\n\n  numberInputRef: HTMLInputElement | null = null;\n\n  constructor(props: Props) {\n    super(props);\n\n    // eslint-disable-next-line\n    const preferredCountriesFromProps = props.preferredCountries;\n\n    const preferredCountries = preferredCountriesFromProps\n      .map((iso2) =>\n        Object.prototype.hasOwnProperty.call(iso2Lookup, iso2)\n          ? allCountries[iso2Lookup[iso2]]\n          : null,\n      )\n      .filter((val) => val !== null);\n\n    this.state = {\n      firstCall: true,\n      preferredCountries,\n      showDropDown: false,\n      queryString: '',\n      freezeSelection: false,\n      debouncedQueryStingSearcher: debounce(this.searchCountry, 600),\n      formattedNumber: '',\n      highlightCountryIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    this._cursorToEnd(true);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !equals(nextProps, this.props) || !equals(nextState, this.state);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    let inputNumber;\n    const { onlyCountries } = props;\n    const { showDropDown, preferredCountries, selectedCountry } = state;\n\n    // don't calculate new state if the dropdown is open. We might be changing\n    // the highlightCountryIndex using our keys\n    if (showDropDown) {\n      return state;\n    }\n\n    if (props.value) {\n      inputNumber = props.value;\n    } else if (props.initialValue && state.firstCall) {\n      inputNumber = props.initialValue;\n    } else if (props.value === null) {\n      // just clear the value\n      inputNumber = '';\n    } else if (\n      state &&\n      state.formattedNumber &&\n      state.formattedNumber.length > 0\n    ) {\n      inputNumber = state.formattedNumber;\n    } else {\n      inputNumber = '';\n    }\n\n    let selectedCountryGuess = guessSelectedCountry(\n      inputNumber.replace(/\\D/g, ''),\n      props,\n    );\n\n    // if the guessed country has the same dialCode as the selected country in\n    // our state, we give preference to the already selected country\n    if (\n      selectedCountry &&\n      selectedCountryGuess.dialCode === selectedCountry.dialCode\n    ) {\n      selectedCountryGuess = selectedCountry;\n    }\n\n    const selectedCountryGuessIndex = findIndex(\n      propEq('iso2', selectedCountryGuess.iso2),\n      preferredCountries.concat(onlyCountries),\n    );\n\n    const formattedNumber = formatNumber(\n      inputNumber.replace(/\\D/g, ''),\n      selectedCountryGuess && selectedCountryGuess.format\n        ? selectedCountryGuess.format\n        : null,\n      props.autoFormat,\n    );\n\n    return {\n      firstCall: false,\n      selectedCountry: selectedCountryGuess,\n      highlightCountryIndex: selectedCountryGuessIndex,\n      formattedNumber,\n    };\n  }\n\n  // put the cursor to the end of the input (usually after a focus event)\n  _cursorToEnd = (skipFocus = false) => {\n    const input = this.numberInputRef;\n    if (skipFocus) {\n      this._fillDialCode();\n    } else {\n      if (input) {\n        input.focus();\n      }\n\n      if (isModernBrowser && input) {\n        const len = input.value.length;\n        input.setSelectionRange(len, len);\n      }\n    }\n  };\n\n  handleFlagDropdownClick = (e: React.SyntheticEvent) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    e.preventDefault();\n    const { preferredCountries } = this.state;\n    const selectedCountry = this.state.selectedCountry!;\n    const { onlyCountries } = this.props;\n\n    const highlightCountryIndex = findIndex(\n      propEq('iso2', selectedCountry.iso2),\n      preferredCountries.concat(onlyCountries),\n    );\n\n    // need to put the highlight on the current selected country if the dropdown is going to open up\n    this.setState({\n      showDropDown: !this.state.showDropDown,\n      highlightCountryIndex,\n    });\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let formattedNumber = '+';\n    let newSelectedCountry = this.state.selectedCountry!;\n    let { freezeSelection } = this.state;\n\n    // if the input is the same as before, must be some special key like enter, alt, command etc.\n    if (event.target.value === this.state.formattedNumber) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n      event.nativeEvent.preventDefault();\n    }\n\n    if (event.target.value && event.target.value.length > 0) {\n      // before entering the number in new format,\n      // lets check if the dial code now matches some other country\n      // replace all non-numeric characters from the input string\n      const inputNumber = event.target.value.replace(/\\D/g, '');\n\n      // we don't need to send the whole number to guess the country...\n      // only the first 6 characters are enough\n      // the guess country function can then use memoization much more effectively\n      // since the set of input it gets has drastically reduced\n      if (\n        !this.state.freezeSelection ||\n        newSelectedCountry.dialCode.length > inputNumber.length\n      ) {\n        newSelectedCountry = guessSelectedCountry(\n          inputNumber.substring(0, 6),\n          this.props,\n        );\n        freezeSelection = false;\n      }\n      formattedNumber = formatNumber(\n        inputNumber,\n        newSelectedCountry && newSelectedCountry.format\n          ? newSelectedCountry.format\n          : null,\n        this.props.autoFormat,\n      );\n    }\n\n    let caretPosition: number = event.target.selectionStart || 0;\n    const oldFormattedText = this.state.formattedNumber;\n    const diff = formattedNumber.length - oldFormattedText.length;\n    const selectedCountry =\n      newSelectedCountry.dialCode.length > 0\n        ? newSelectedCountry\n        : this.state.selectedCountry!;\n\n    this.setState(\n      {\n        formattedNumber,\n        freezeSelection,\n        selectedCountry,\n      },\n      () => {\n        if (isModernBrowser) {\n          if (caretPosition === 1 && formattedNumber.length === 2) {\n            caretPosition += 1;\n          }\n\n          if (diff > 0) {\n            caretPosition -= diff;\n          }\n\n          if (\n            caretPosition > 0 &&\n            oldFormattedText.length >= formattedNumber.length\n          ) {\n            if (this.numberInputRef) {\n              this.numberInputRef.setSelectionRange(\n                caretPosition,\n                caretPosition,\n              );\n            }\n          }\n        }\n\n        if (this.props.onChange) {\n          this.props.onChange(formattedNumber, selectedCountry);\n        }\n      },\n    );\n  };\n\n  handleInputClick = () => {\n    this.setState({ showDropDown: false });\n  };\n\n  handleFlagItemClick = (country: Country) => {\n    const { onlyCountries } = this.props;\n    const currentSelectedCountry = this.state.selectedCountry!;\n    const nextSelectedCountry = find(\n      (c: Country) => c.iso2 === country.iso2,\n      onlyCountries,\n    );\n\n    // tiny optimization\n    if (\n      nextSelectedCountry &&\n      currentSelectedCountry.iso2 !== nextSelectedCountry.iso2\n    ) {\n      const newNumber = replaceCountryCode(\n        currentSelectedCountry,\n        nextSelectedCountry,\n        this.state.formattedNumber.replace(/\\D/g, ''), // let's convert formatted number to just numbers for easy find/replace\n      );\n\n      const formattedNumber = formatNumber(\n        newNumber,\n        nextSelectedCountry.format,\n        this.props.autoFormat,\n      );\n\n      this.setState(\n        {\n          showDropDown: false,\n          selectedCountry: nextSelectedCountry,\n          freezeSelection: true,\n          formattedNumber,\n        },\n        () => {\n          this._cursorToEnd();\n          if (this.props.onChange) {\n            this.props.onChange(formattedNumber, nextSelectedCountry);\n          }\n        },\n      );\n    } else {\n      this.setState({ showDropDown: false });\n    }\n  };\n\n  handleInputFocus = () => {\n    // trigger parent component's onFocus handler\n    if (typeof this.props.onFocus === 'function') {\n      this.props.onFocus(\n        this.state.formattedNumber,\n        this.state.selectedCountry!,\n      );\n    }\n\n    this._fillDialCode();\n  };\n\n  _fillDialCode = () => {\n    const selectedCountry = this.state.selectedCountry!;\n\n    // if the input is blank, insert dial code of the selected country\n    if (this.numberInputRef && this.numberInputRef.value === '+') {\n      this.setState({\n        formattedNumber: `+${selectedCountry.dialCode}`,\n      });\n    }\n  };\n\n  _getHighlightCountryIndex = (direction: Direction) => {\n    const { onlyCountries } = this.props;\n    const { highlightCountryIndex, preferredCountries } = this.state;\n\n    // had to write own function because underscore does not have findIndex. lodash has it\n    const newHighlightCountryIndex = highlightCountryIndex + direction;\n\n    if (\n      newHighlightCountryIndex < 0 ||\n      newHighlightCountryIndex >=\n        onlyCountries.length + preferredCountries.length\n    ) {\n      return newHighlightCountryIndex - direction;\n    }\n\n    return newHighlightCountryIndex;\n  };\n\n  // memoize search results... caching all the way\n  _searchCountry = memoize((queryString) => {\n    const { onlyCountries } = this.props;\n    if (!queryString || queryString.length === 0) {\n      return null;\n    }\n    // don't include the preferred countries in search\n    const probableCountries = onlyCountries.filter(\n      (country: Country) =>\n        country.name\n          ? startsWith(queryString.toLowerCase(), country.name.toLowerCase())\n          : false,\n      this,\n    );\n    return probableCountries[0];\n  });\n\n  searchCountry = () => {\n    const { onlyCountries } = this.props;\n\n    const probableCandidate =\n      this._searchCountry(this.state.queryString) || onlyCountries[0];\n    const probableCandidateIndex =\n      findIndex(\n        propEq('iso2', probableCandidate.iso2),\n        this.props.onlyCountries,\n      ) + this.state.preferredCountries.length;\n\n    this.setState({\n      queryString: '',\n      highlightCountryIndex: probableCandidateIndex,\n    });\n  };\n\n  handleKeydown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { onlyCountries } = this.props;\n\n    if (!this.state.showDropDown || event.metaKey || event.altKey) {\n      return;\n    }\n\n    // ie hack\n    if (event.preventDefault) {\n      event.preventDefault();\n      event.nativeEvent.preventDefault();\n    }\n\n    const _moveHighlight = (direction: Direction) => {\n      const highlightCountryIndex = this._getHighlightCountryIndex(direction);\n\n      this.setState({\n        highlightCountryIndex,\n      });\n    };\n\n    switch (event.which) {\n      case keys.DOWN:\n        _moveHighlight(1);\n        break;\n      case keys.UP:\n        _moveHighlight(-1);\n        break;\n      case keys.ENTER:\n        this.handleFlagItemClick(\n          this.state.preferredCountries.concat(onlyCountries)[\n            this.state.highlightCountryIndex\n          ],\n        );\n        break;\n      case keys.ESC:\n        this.setState({ showDropDown: false }, this._cursorToEnd);\n        break;\n      default:\n        if (\n          (event.which >= keys.A && event.which <= keys.Z) ||\n          event.which === keys.SPACE\n        ) {\n          this.setState(\n            {\n              queryString:\n                this.state.queryString + String.fromCharCode(event.which),\n            },\n            this.state.debouncedQueryStingSearcher,\n          );\n        }\n    }\n  };\n\n  handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (\n      event.which === keys.ENTER &&\n      typeof this.props.onEnterKeyPress === 'function'\n    ) {\n      this.props.onEnterKeyPress(event);\n    }\n  };\n\n  handleClickOutside = () => {\n    if (this.state.showDropDown) {\n      this.setState({\n        showDropDown: false,\n      });\n    }\n  };\n\n  getCountryDropDownList = () => {\n    const { onlyCountries } = this.props;\n\n    const { highlightCountryIndex, preferredCountries } = this.state;\n    const data = preferredCountries.concat(onlyCountries);\n\n    return (\n      <VirtualList\n        width={getDropdownListWidth()}\n        height={300}\n        itemCount={data.length}\n        itemSize={40}\n        style={this.props.listStyle}\n        className=\"country-list\"\n        scrollToIndex={highlightCountryIndex}\n        scrollToAlignment={'center' as any}\n        renderItem={({ index, style }) => {\n          const country = data[index];\n          const itemClasses = classNames(this.props.listItemClassName, {\n            preferred:\n              findIndex(\n                propEq('iso2', country.iso2),\n                this.state.preferredCountries,\n              ) >= 0,\n            highlight: this.state.highlightCountryIndex === index,\n          });\n\n          const inputFlagClasses = `flag ${country.iso2}`;\n\n          return (\n            <div\n              key={`flag_no_${index}`}\n              data-flag-key={`flag_no_${index}`}\n              className={itemClasses}\n              data-dial-code={country.dialCode}\n              data-country-code={country.iso2}\n              onClick={this.handleFlagItemClick.bind(this, country)}\n              style={style}\n              title={`${country.name} - ${country.dialCode}`}\n              data-test-id=\"src_reacttelephoneinput_test_id_0\"\n            >\n              <div\n                className={inputFlagClasses}\n                style={this.getFlagStyle()}\n                data-test-id=\"src_reacttelephoneinput_test_id_1\"\n              />\n              <span\n                className=\"country-name\"\n                data-test-id=\"src_reacttelephoneinput_test_id_2\"\n              >\n                {country.name}\n              </span>\n              <span\n                className=\"dial-code\"\n                data-test-id=\"src_reacttelephoneinput_test_id_3\"\n              >{`+${country.dialCode}`}</span>\n            </div>\n          );\n        }}\n      />\n    );\n  };\n\n  getFlagStyle = () => {\n    if (this.props.flagsImagePath) {\n      return {\n        backgroundImage: `url(${this.props.flagsImagePath})`,\n      };\n    }\n    return {};\n  };\n\n  handleInputBlur = () => {\n    const selectedCountry = this.state.selectedCountry!;\n\n    if (typeof this.props.onBlur === 'function') {\n      this.props.onBlur(this.state.formattedNumber, selectedCountry);\n    }\n  };\n\n  handleFlagKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    // only trigger dropdown click if the dropdown is not already open.\n    // it will otherwise interfere with key up/down of list\n    if (event.which === keys.DOWN && this.state.showDropDown === false) {\n      this.handleFlagDropdownClick(event);\n    }\n  };\n\n  render() {\n    const { isValid } = this.props;\n    const selectedCountry = this.state.selectedCountry!;\n\n    const arrowClasses = classNames({\n      arrow: true,\n      up: this.state.showDropDown,\n    });\n    const inputClasses = classNames({\n      'form-control': true,\n      'invalid-number': !isValid(this.state.formattedNumber.replace(/\\D/g, '')),\n    });\n\n    const flagViewClasses = classNames({\n      'flag-dropdown': true,\n      'open-dropdown': this.state.showDropDown,\n    });\n\n    const inputFlagClasses = `flag ${selectedCountry.iso2}`;\n    const { buttonProps } = this.props;\n    const otherProps = this.props.inputProps;\n    if (otherProps && this.props.inputId) {\n      otherProps.id = this.props.inputId;\n    }\n\n    return (\n      <div\n        className={classNames(\n          'react-tel-input',\n          this.props.classNames,\n          this.props.className,\n        )}\n        data-test-id=\"src_reacttelephoneinput_test_id_4\"\n      >\n        <div\n          className={flagViewClasses}\n          onKeyDown={this.handleKeydown}\n          data-test-id=\"src_reacttelephoneinput_test_id_6\"\n        >\n          <button\n            onClick={this.handleFlagDropdownClick}\n            className=\"selected-flag\"\n            title={`${selectedCountry.name}: + ${selectedCountry.dialCode}`}\n            data-test-id=\"src_reacttelephoneinput_test_id_7\"\n            onKeyDown={this.handleFlagKeyDown}\n            type={'button' as any}\n            {...buttonProps}\n          >\n            <div\n              className={inputFlagClasses}\n              style={this.getFlagStyle()}\n              data-test-id=\"src_reacttelephoneinput_test_id_8\"\n            >\n              <div\n                className={arrowClasses}\n                data-test-id=\"src_reacttelephoneinput_test_id_9\"\n              />\n            </div>\n          </button>\n          {this.state.showDropDown ? this.getCountryDropDownList() : ''}\n        </div>\n        <input\n          onChange={this.handleInput}\n          onClick={this.handleInputClick}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          onKeyDown={this.handleInputKeyDown}\n          value={this.state.formattedNumber}\n          ref={(node) => {\n            this.numberInputRef = node;\n          }}\n          type=\"tel\"\n          className={inputClasses}\n          autoComplete={this.props.autoComplete}\n          pattern={this.props.pattern}\n          required={this.props.required}\n          placeholder={this.props.placeholder}\n          disabled={this.props.disabled}\n          {...otherProps}\n          data-test-id=\"src_reacttelephoneinput_test_id_5\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default enhanceWithClickOutside(ReactTelephoneInput);\n","import { Country } from './ReactTelephoneInput';\n\nexport default function replaceCountryCode(\n  currentSelectedCountry: Country,\n  nextSelectedCountry: Country,\n  number: string,\n) {\n  const dialCodeRegex = RegExp(`^(${currentSelectedCountry.dialCode})`);\n  const codeToBeReplaced = number.match(dialCodeRegex);\n  const newNumber = number.replace(dialCodeRegex, nextSelectedCountry.dialCode);\n\n  if (codeToBeReplaced === null && newNumber === number) {\n    return nextSelectedCountry.dialCode + number;\n  }\n  return newNumber;\n}\n","import R from 'cramda';\nimport countryData from 'country-telephone-data';\nimport { Country } from './ReactTelephoneInput';\n\nexport default function isNumberValid(inputNumber: string) {\n  const countries = countryData.allCountries;\n  return R.any(\n    (country: Country) =>\n      R.startsWith(country.dialCode, inputNumber) ||\n      R.startsWith(inputNumber, country.dialCode),\n    countries,\n  );\n}\n"],"names":["first","R","tail","formatNumber","text","pattern","autoFormat","length","formattedObject","split","reduce","acc","character","remainingText","formattedText","join","find","propEq","startsWith","allCountries","countryData","allCountryCodes","guessSelectedCountry","inputNumber","props","bestGuess","onlyCountries","secondBestGuess","defaultCountry","inputNumberForCountries","substr","trim","selectedCountry","country","iso2","dialCode","priority","name","isModernBrowser","equals","findIndex","iso2Lookup","document","Boolean","createElement","setSelectionRange","ReactTelephoneInput","skipFocus","input","_this","numberInputRef","_fillDialCode","focus","len","value","e","disabled","preventDefault","preferredCountries","state","highlightCountryIndex","concat","setState","showDropDown","event","formattedNumber","newSelectedCountry","freezeSelection","target","nativeEvent","replace","substring","format","caretPosition","selectionStart","oldFormattedText","diff","onChange","currentSelectedCountry","nextSelectedCountry","c","number","dialCodeRegex","RegExp","codeToBeReplaced","match","newNumber","replaceCountryCode","_cursorToEnd","onFocus","direction","newHighlightCountryIndex","memoize","queryString","filter","toLowerCase","probableCandidate","_searchCountry","probableCandidateIndex","metaKey","altKey","_moveHighlight","_getHighlightCountryIndex","which","handleFlagItemClick","String","fromCharCode","debouncedQueryStingSearcher","onEnterKeyPress","data","React","VirtualList","width","window","innerWidth","height","itemCount","itemSize","style","listStyle","className","scrollToIndex","scrollToAlignment","renderItem","index","itemClasses","classNames","listItemClassName","preferred","highlight","inputFlagClasses","key","onClick","bind","title","getFlagStyle","flagsImagePath","backgroundImage","onBlur","handleFlagDropdownClick","map","Object","prototype","hasOwnProperty","call","val","firstCall","debounce","searchCountry","componentDidMount","shouldComponentUpdate","nextProps","nextState","this","getDerivedStateFromProps","selectedCountryGuess","initialValue","render","isValid","arrowClasses","arrow","up","inputClasses","flagViewClasses","buttonProps","otherProps","inputProps","inputId","id","onKeyDown","handleKeydown","handleFlagKeyDown","type","getCountryDropDownList","handleInput","handleInputClick","handleInputFocus","handleInputBlur","handleInputKeyDown","ref","node","_this2","autoComplete","required","placeholder","Component","any","zIndex","backgroundColor","enhanceWithClickOutside"],"mappings":"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"}