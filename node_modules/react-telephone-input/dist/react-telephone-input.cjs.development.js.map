{"version":3,"file":"react-telephone-input.cjs.development.js","sources":["../src/format_number.ts","../src/replace_country_code.ts","../src/number_validator.ts","../src/guessSelectedCountry.ts","../src/ReactTelephoneInput.tsx"],"sourcesContent":["import R from 'cramda';\n\nconst { first, tail } = R;\n\nfunction formatNumber(\n  text: string,\n  pattern: string | null,\n  autoFormat = false,\n) {\n  if (!text || text.length === 0) {\n    return '+';\n  }\n\n  // for all strings with length less than 3, just return it (1, 2 etc.)\n  // also return the same text if the selected country has no fixed format\n  if ((text && text.length < 2) || !pattern || !autoFormat) {\n    return `+${text}`;\n  }\n\n  const formattedObject = pattern.split('').reduce(\n    (acc, character) => {\n      if (acc.remainingText.length === 0) {\n        return acc;\n      }\n\n      if (character !== '.') {\n        return {\n          formattedText: acc.formattedText + character,\n          remainingText: acc.remainingText,\n        };\n      }\n\n      return {\n        formattedText: acc.formattedText + first(acc.remainingText),\n        remainingText: tail(acc.remainingText),\n      };\n    },\n    { formattedText: '', remainingText: text.split('') },\n  );\n  return formattedObject.formattedText + formattedObject.remainingText.join('');\n}\n\nexport default formatNumber;\n","import { Country } from './ReactTelephoneInput';\n\nexport default function replaceCountryCode(\n  currentSelectedCountry: Country,\n  nextSelectedCountry: Country,\n  number: string,\n) {\n  const dialCodeRegex = RegExp(`^(${currentSelectedCountry.dialCode})`);\n  const codeToBeReplaced = number.match(dialCodeRegex);\n  const newNumber = number.replace(dialCodeRegex, nextSelectedCountry.dialCode);\n\n  if (codeToBeReplaced === null && newNumber === number) {\n    return nextSelectedCountry.dialCode + number;\n  }\n  return newNumber;\n}\n","import R from 'cramda';\nimport countryData from 'country-telephone-data';\nimport { Country } from './ReactTelephoneInput';\n\nexport default function isNumberValid(inputNumber: string) {\n  const countries = countryData.allCountries;\n  return R.any(\n    (country: Country) =>\n      R.startsWith(country.dialCode, inputNumber) ||\n      R.startsWith(inputNumber, country.dialCode),\n    countries,\n  );\n}\n","import * as React from 'react';\n// memoize results based on the first 5/6 characters. That is all that matters\n\nimport R from 'cramda';\nimport countryData from 'country-telephone-data';\n\nconst { find, propEq, startsWith } = R;\nconst { allCountries, allCountryCodes } = countryData;\nimport { Country, Props } from './ReactTelephoneInput';\n\nexport default function guessSelectedCountry(\n  inputNumber: string,\n  props: Props,\n): Country {\n  const defaultCountry = props.defaultCountry!;\n  const onlyCountries = props.onlyCountries!;\n\n  const secondBestGuess =\n    find(propEq('iso2', defaultCountry), allCountries) || onlyCountries[0];\n\n  const inputNumberForCountries = inputNumber.substr(0, 4);\n  let bestGuess;\n\n  if (inputNumber.trim() !== '') {\n    bestGuess = onlyCountries.reduce(\n      (selectedCountry: Country, country: Country) => {\n        // if the country dialCode exists WITH area code\n\n        if (\n          allCountryCodes[inputNumberForCountries] &&\n          allCountryCodes[inputNumberForCountries][0] === country.iso2\n        ) {\n          return country;\n\n          // if the selected country dialCode is there with the area code\n        } else if (\n          allCountryCodes[inputNumberForCountries] &&\n          allCountryCodes[inputNumberForCountries][0] === selectedCountry.iso2\n        ) {\n          return selectedCountry;\n\n          // else do the original if statement\n        }\n        if (startsWith(country.dialCode, inputNumber)) {\n          if (country.dialCode.length > selectedCountry.dialCode.length) {\n            return country;\n          }\n          if (\n            country.dialCode.length === selectedCountry.dialCode.length &&\n            country.priority < selectedCountry.priority\n          ) {\n            return country;\n          }\n        }\n\n        return selectedCountry;\n      },\n      { dialCode: '', priority: 10001 },\n    );\n  } else {\n    return secondBestGuess;\n  }\n\n  if (!bestGuess || !bestGuess.name) {\n    return secondBestGuess;\n  }\n\n  return bestGuess;\n}\n","import R from 'cramda';\nimport VirtualList from 'react-tiny-virtual-list';\n\nimport debounce from 'debounce';\nimport memoize from 'lodash.memoize';\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport classNames from 'classnames';\nimport enhanceWithClickOutside from 'react-click-outside';\nimport countryData from 'country-telephone-data';\nimport formatNumber from './format_number';\nimport replaceCountryCode from './replace_country_code';\nimport isNumberValid from './number_validator';\nimport guessSelectedCountry from './guessSelectedCountry';\n\ntype Direction = 1 | -1;\ntype ISO2Name = string;\n\nexport interface Country {\n  name?: string;\n  iso2?: ISO2Name;\n  dialCode: string;\n  priority: number;\n  format?: string;\n}\n\ninterface DefaultProps {\n  autoFormat: boolean;\n  onlyCountries: Array<Country>;\n  defaultCountry: ISO2Name;\n  isValid: (inputNumber: string) => boolean;\n  flagsImagePath: string;\n  onEnterKeyPress: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  preferredCountries: Array<ISO2Name>;\n  disabled: boolean;\n  placeholder: string;\n  autoComplete: string; // TODO: find the exact list of acceptable strings\n  required: boolean;\n  inputProps: React.HTMLProps<HTMLInputElement>;\n  buttonProps: React.HTMLProps<HTMLButtonElement>;\n  listItemClassName: string;\n  listStyle: React.CSSProperties;\n}\n\nexport type Props = {\n  value?: string;\n  initialValue?: string;\n  classNames: string;\n  className: string;\n  inputId: string;\n  onChange: (inputNumber: string, selectedCountry: Country) => void;\n  onFocus?: (inputNumber: string, selectedCountry: Country) => void;\n  onBlur?: (inputNumber: string, selectedCountry: Country) => void;\n  pattern: string;\n} & DefaultProps;\n\nconst { find, propEq, equals, findIndex, startsWith } = R;\n\nconst { allCountries, iso2Lookup } = countryData;\nlet isModernBrowser = true;\n\nif (typeof document !== 'undefined') {\n  isModernBrowser = Boolean(document.createElement('input').setSelectionRange);\n} else {\n  isModernBrowser = true;\n}\n\nconst keys = {\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  LEFT: 37,\n  ENTER: 13,\n  ESC: 27,\n  PLUS: 43,\n  A: 65,\n  Z: 90,\n  SPACE: 32,\n};\n\nfunction getDropdownListWidth() {\n  const defaultWidth = 400;\n  const horizontalMargin = 20;\n\n  if (window.innerWidth - horizontalMargin < defaultWidth) {\n    return window.innerWidth - horizontalMargin;\n  } else {\n    return defaultWidth;\n  }\n}\n\ninterface State {\n  firstCall: boolean;\n  preferredCountries: Array<Country>;\n  showDropDown: boolean;\n  queryString: string;\n  freezeSelection: boolean;\n  debouncedQueryStingSearcher: () => void;\n  selectedCountry?: Country;\n  highlightCountryIndex: number;\n  formattedNumber: string;\n}\n\nexport class ReactTelephoneInput extends Component<Props, State> {\n  static defaultProps = {\n    autoFormat: true,\n    onlyCountries: allCountries,\n    defaultCountry: allCountries[0].iso2,\n    isValid: isNumberValid,\n    flagsImagePath: 'flags.png',\n    onEnterKeyPress() {},\n    preferredCountries: [],\n    disabled: false,\n    placeholder: '+1 (702) 123-4567',\n    autoComplete: 'tel',\n    required: false,\n    inputProps: {},\n    buttonProps: {},\n    listItemClassName: 'country',\n    listStyle: {\n      zIndex: 20,\n      backgroundColor: 'white',\n    },\n  };\n\n  numberInputRef: HTMLInputElement | null = null;\n\n  constructor(props: Props) {\n    super(props);\n\n    // eslint-disable-next-line\n    const preferredCountriesFromProps = props.preferredCountries;\n\n    const preferredCountries = preferredCountriesFromProps\n      .map((iso2) =>\n        Object.prototype.hasOwnProperty.call(iso2Lookup, iso2)\n          ? allCountries[iso2Lookup[iso2]]\n          : null,\n      )\n      .filter((val) => val !== null);\n\n    this.state = {\n      firstCall: true,\n      preferredCountries,\n      showDropDown: false,\n      queryString: '',\n      freezeSelection: false,\n      debouncedQueryStingSearcher: debounce(this.searchCountry, 600),\n      formattedNumber: '',\n      highlightCountryIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    this._cursorToEnd(true);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !equals(nextProps, this.props) || !equals(nextState, this.state);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    let inputNumber;\n    const { onlyCountries } = props;\n    const { showDropDown, preferredCountries, selectedCountry } = state;\n\n    // don't calculate new state if the dropdown is open. We might be changing\n    // the highlightCountryIndex using our keys\n    if (showDropDown) {\n      return state;\n    }\n\n    if (props.value) {\n      inputNumber = props.value;\n    } else if (props.initialValue && state.firstCall) {\n      inputNumber = props.initialValue;\n    } else if (props.value === null) {\n      // just clear the value\n      inputNumber = '';\n    } else if (\n      state &&\n      state.formattedNumber &&\n      state.formattedNumber.length > 0\n    ) {\n      inputNumber = state.formattedNumber;\n    } else {\n      inputNumber = '';\n    }\n\n    let selectedCountryGuess = guessSelectedCountry(\n      inputNumber.replace(/\\D/g, ''),\n      props,\n    );\n\n    // if the guessed country has the same dialCode as the selected country in\n    // our state, we give preference to the already selected country\n    if (\n      selectedCountry &&\n      selectedCountryGuess.dialCode === selectedCountry.dialCode\n    ) {\n      selectedCountryGuess = selectedCountry;\n    }\n\n    const selectedCountryGuessIndex = findIndex(\n      propEq('iso2', selectedCountryGuess.iso2),\n      preferredCountries.concat(onlyCountries),\n    );\n\n    const formattedNumber = formatNumber(\n      inputNumber.replace(/\\D/g, ''),\n      selectedCountryGuess && selectedCountryGuess.format\n        ? selectedCountryGuess.format\n        : null,\n      props.autoFormat,\n    );\n\n    return {\n      firstCall: false,\n      selectedCountry: selectedCountryGuess,\n      highlightCountryIndex: selectedCountryGuessIndex,\n      formattedNumber,\n    };\n  }\n\n  // put the cursor to the end of the input (usually after a focus event)\n  _cursorToEnd = (skipFocus = false) => {\n    const input = this.numberInputRef;\n    if (skipFocus) {\n      this._fillDialCode();\n    } else {\n      if (input) {\n        input.focus();\n      }\n\n      if (isModernBrowser && input) {\n        const len = input.value.length;\n        input.setSelectionRange(len, len);\n      }\n    }\n  };\n\n  handleFlagDropdownClick = (e: React.SyntheticEvent) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    e.preventDefault();\n    const { preferredCountries } = this.state;\n    const selectedCountry = this.state.selectedCountry!;\n    const { onlyCountries } = this.props;\n\n    const highlightCountryIndex = findIndex(\n      propEq('iso2', selectedCountry.iso2),\n      preferredCountries.concat(onlyCountries),\n    );\n\n    // need to put the highlight on the current selected country if the dropdown is going to open up\n    this.setState({\n      showDropDown: !this.state.showDropDown,\n      highlightCountryIndex,\n    });\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let formattedNumber = '+';\n    let newSelectedCountry = this.state.selectedCountry!;\n    let { freezeSelection } = this.state;\n\n    // if the input is the same as before, must be some special key like enter, alt, command etc.\n    if (event.target.value === this.state.formattedNumber) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n      event.nativeEvent.preventDefault();\n    }\n\n    if (event.target.value && event.target.value.length > 0) {\n      // before entering the number in new format,\n      // lets check if the dial code now matches some other country\n      // replace all non-numeric characters from the input string\n      const inputNumber = event.target.value.replace(/\\D/g, '');\n\n      // we don't need to send the whole number to guess the country...\n      // only the first 6 characters are enough\n      // the guess country function can then use memoization much more effectively\n      // since the set of input it gets has drastically reduced\n      if (\n        !this.state.freezeSelection ||\n        newSelectedCountry.dialCode.length > inputNumber.length\n      ) {\n        newSelectedCountry = guessSelectedCountry(\n          inputNumber.substring(0, 6),\n          this.props,\n        );\n        freezeSelection = false;\n      }\n      formattedNumber = formatNumber(\n        inputNumber,\n        newSelectedCountry && newSelectedCountry.format\n          ? newSelectedCountry.format\n          : null,\n        this.props.autoFormat,\n      );\n    }\n\n    let caretPosition: number = event.target.selectionStart || 0;\n    const oldFormattedText = this.state.formattedNumber;\n    const diff = formattedNumber.length - oldFormattedText.length;\n    const selectedCountry =\n      newSelectedCountry.dialCode.length > 0\n        ? newSelectedCountry\n        : this.state.selectedCountry!;\n\n    this.setState(\n      {\n        formattedNumber,\n        freezeSelection,\n        selectedCountry,\n      },\n      () => {\n        if (isModernBrowser) {\n          if (caretPosition === 1 && formattedNumber.length === 2) {\n            caretPosition += 1;\n          }\n\n          if (diff > 0) {\n            caretPosition -= diff;\n          }\n\n          if (\n            caretPosition > 0 &&\n            oldFormattedText.length >= formattedNumber.length\n          ) {\n            if (this.numberInputRef) {\n              this.numberInputRef.setSelectionRange(\n                caretPosition,\n                caretPosition,\n              );\n            }\n          }\n        }\n\n        if (this.props.onChange) {\n          this.props.onChange(formattedNumber, selectedCountry);\n        }\n      },\n    );\n  };\n\n  handleInputClick = () => {\n    this.setState({ showDropDown: false });\n  };\n\n  handleFlagItemClick = (country: Country) => {\n    const { onlyCountries } = this.props;\n    const currentSelectedCountry = this.state.selectedCountry!;\n    const nextSelectedCountry = find(\n      (c: Country) => c.iso2 === country.iso2,\n      onlyCountries,\n    );\n\n    // tiny optimization\n    if (\n      nextSelectedCountry &&\n      currentSelectedCountry.iso2 !== nextSelectedCountry.iso2\n    ) {\n      const newNumber = replaceCountryCode(\n        currentSelectedCountry,\n        nextSelectedCountry,\n        this.state.formattedNumber.replace(/\\D/g, ''), // let's convert formatted number to just numbers for easy find/replace\n      );\n\n      const formattedNumber = formatNumber(\n        newNumber,\n        nextSelectedCountry.format,\n        this.props.autoFormat,\n      );\n\n      this.setState(\n        {\n          showDropDown: false,\n          selectedCountry: nextSelectedCountry,\n          freezeSelection: true,\n          formattedNumber,\n        },\n        () => {\n          this._cursorToEnd();\n          if (this.props.onChange) {\n            this.props.onChange(formattedNumber, nextSelectedCountry);\n          }\n        },\n      );\n    } else {\n      this.setState({ showDropDown: false });\n    }\n  };\n\n  handleInputFocus = () => {\n    // trigger parent component's onFocus handler\n    if (typeof this.props.onFocus === 'function') {\n      this.props.onFocus(\n        this.state.formattedNumber,\n        this.state.selectedCountry!,\n      );\n    }\n\n    this._fillDialCode();\n  };\n\n  _fillDialCode = () => {\n    const selectedCountry = this.state.selectedCountry!;\n\n    // if the input is blank, insert dial code of the selected country\n    if (this.numberInputRef && this.numberInputRef.value === '+') {\n      this.setState({\n        formattedNumber: `+${selectedCountry.dialCode}`,\n      });\n    }\n  };\n\n  _getHighlightCountryIndex = (direction: Direction) => {\n    const { onlyCountries } = this.props;\n    const { highlightCountryIndex, preferredCountries } = this.state;\n\n    // had to write own function because underscore does not have findIndex. lodash has it\n    const newHighlightCountryIndex = highlightCountryIndex + direction;\n\n    if (\n      newHighlightCountryIndex < 0 ||\n      newHighlightCountryIndex >=\n        onlyCountries.length + preferredCountries.length\n    ) {\n      return newHighlightCountryIndex - direction;\n    }\n\n    return newHighlightCountryIndex;\n  };\n\n  // memoize search results... caching all the way\n  _searchCountry = memoize((queryString) => {\n    const { onlyCountries } = this.props;\n    if (!queryString || queryString.length === 0) {\n      return null;\n    }\n    // don't include the preferred countries in search\n    const probableCountries = onlyCountries.filter(\n      (country: Country) =>\n        country.name\n          ? startsWith(queryString.toLowerCase(), country.name.toLowerCase())\n          : false,\n      this,\n    );\n    return probableCountries[0];\n  });\n\n  searchCountry = () => {\n    const { onlyCountries } = this.props;\n\n    const probableCandidate =\n      this._searchCountry(this.state.queryString) || onlyCountries[0];\n    const probableCandidateIndex =\n      findIndex(\n        propEq('iso2', probableCandidate.iso2),\n        this.props.onlyCountries,\n      ) + this.state.preferredCountries.length;\n\n    this.setState({\n      queryString: '',\n      highlightCountryIndex: probableCandidateIndex,\n    });\n  };\n\n  handleKeydown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { onlyCountries } = this.props;\n\n    if (!this.state.showDropDown || event.metaKey || event.altKey) {\n      return;\n    }\n\n    // ie hack\n    if (event.preventDefault) {\n      event.preventDefault();\n      event.nativeEvent.preventDefault();\n    }\n\n    const _moveHighlight = (direction: Direction) => {\n      const highlightCountryIndex = this._getHighlightCountryIndex(direction);\n\n      this.setState({\n        highlightCountryIndex,\n      });\n    };\n\n    switch (event.which) {\n      case keys.DOWN:\n        _moveHighlight(1);\n        break;\n      case keys.UP:\n        _moveHighlight(-1);\n        break;\n      case keys.ENTER:\n        this.handleFlagItemClick(\n          this.state.preferredCountries.concat(onlyCountries)[\n            this.state.highlightCountryIndex\n          ],\n        );\n        break;\n      case keys.ESC:\n        this.setState({ showDropDown: false }, this._cursorToEnd);\n        break;\n      default:\n        if (\n          (event.which >= keys.A && event.which <= keys.Z) ||\n          event.which === keys.SPACE\n        ) {\n          this.setState(\n            {\n              queryString:\n                this.state.queryString + String.fromCharCode(event.which),\n            },\n            this.state.debouncedQueryStingSearcher,\n          );\n        }\n    }\n  };\n\n  handleInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (\n      event.which === keys.ENTER &&\n      typeof this.props.onEnterKeyPress === 'function'\n    ) {\n      this.props.onEnterKeyPress(event);\n    }\n  };\n\n  handleClickOutside = () => {\n    if (this.state.showDropDown) {\n      this.setState({\n        showDropDown: false,\n      });\n    }\n  };\n\n  getCountryDropDownList = () => {\n    const { onlyCountries } = this.props;\n\n    const { highlightCountryIndex, preferredCountries } = this.state;\n    const data = preferredCountries.concat(onlyCountries);\n\n    return (\n      <VirtualList\n        width={getDropdownListWidth()}\n        height={300}\n        itemCount={data.length}\n        itemSize={40}\n        style={this.props.listStyle}\n        className=\"country-list\"\n        scrollToIndex={highlightCountryIndex}\n        scrollToAlignment={'center' as any}\n        renderItem={({ index, style }) => {\n          const country = data[index];\n          const itemClasses = classNames(this.props.listItemClassName, {\n            preferred:\n              findIndex(\n                propEq('iso2', country.iso2),\n                this.state.preferredCountries,\n              ) >= 0,\n            highlight: this.state.highlightCountryIndex === index,\n          });\n\n          const inputFlagClasses = `flag ${country.iso2}`;\n\n          return (\n            <div\n              key={`flag_no_${index}`}\n              data-flag-key={`flag_no_${index}`}\n              className={itemClasses}\n              data-dial-code={country.dialCode}\n              data-country-code={country.iso2}\n              onClick={this.handleFlagItemClick.bind(this, country)}\n              style={style}\n              title={`${country.name} - ${country.dialCode}`}\n              data-test-id=\"src_reacttelephoneinput_test_id_0\"\n            >\n              <div\n                className={inputFlagClasses}\n                style={this.getFlagStyle()}\n                data-test-id=\"src_reacttelephoneinput_test_id_1\"\n              />\n              <span\n                className=\"country-name\"\n                data-test-id=\"src_reacttelephoneinput_test_id_2\"\n              >\n                {country.name}\n              </span>\n              <span\n                className=\"dial-code\"\n                data-test-id=\"src_reacttelephoneinput_test_id_3\"\n              >{`+${country.dialCode}`}</span>\n            </div>\n          );\n        }}\n      />\n    );\n  };\n\n  getFlagStyle = () => {\n    if (this.props.flagsImagePath) {\n      return {\n        backgroundImage: `url(${this.props.flagsImagePath})`,\n      };\n    }\n    return {};\n  };\n\n  handleInputBlur = () => {\n    const selectedCountry = this.state.selectedCountry!;\n\n    if (typeof this.props.onBlur === 'function') {\n      this.props.onBlur(this.state.formattedNumber, selectedCountry);\n    }\n  };\n\n  handleFlagKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    // only trigger dropdown click if the dropdown is not already open.\n    // it will otherwise interfere with key up/down of list\n    if (event.which === keys.DOWN && this.state.showDropDown === false) {\n      this.handleFlagDropdownClick(event);\n    }\n  };\n\n  render() {\n    const { isValid } = this.props;\n    const selectedCountry = this.state.selectedCountry!;\n\n    const arrowClasses = classNames({\n      arrow: true,\n      up: this.state.showDropDown,\n    });\n    const inputClasses = classNames({\n      'form-control': true,\n      'invalid-number': !isValid(this.state.formattedNumber.replace(/\\D/g, '')),\n    });\n\n    const flagViewClasses = classNames({\n      'flag-dropdown': true,\n      'open-dropdown': this.state.showDropDown,\n    });\n\n    const inputFlagClasses = `flag ${selectedCountry.iso2}`;\n    const { buttonProps } = this.props;\n    const otherProps = this.props.inputProps;\n    if (otherProps && this.props.inputId) {\n      otherProps.id = this.props.inputId;\n    }\n\n    return (\n      <div\n        className={classNames(\n          'react-tel-input',\n          this.props.classNames,\n          this.props.className,\n        )}\n        data-test-id=\"src_reacttelephoneinput_test_id_4\"\n      >\n        <div\n          className={flagViewClasses}\n          onKeyDown={this.handleKeydown}\n          data-test-id=\"src_reacttelephoneinput_test_id_6\"\n        >\n          <button\n            onClick={this.handleFlagDropdownClick}\n            className=\"selected-flag\"\n            title={`${selectedCountry.name}: + ${selectedCountry.dialCode}`}\n            data-test-id=\"src_reacttelephoneinput_test_id_7\"\n            onKeyDown={this.handleFlagKeyDown}\n            type={'button' as any}\n            {...buttonProps}\n          >\n            <div\n              className={inputFlagClasses}\n              style={this.getFlagStyle()}\n              data-test-id=\"src_reacttelephoneinput_test_id_8\"\n            >\n              <div\n                className={arrowClasses}\n                data-test-id=\"src_reacttelephoneinput_test_id_9\"\n              />\n            </div>\n          </button>\n          {this.state.showDropDown ? this.getCountryDropDownList() : ''}\n        </div>\n        <input\n          onChange={this.handleInput}\n          onClick={this.handleInputClick}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          onKeyDown={this.handleInputKeyDown}\n          value={this.state.formattedNumber}\n          ref={(node) => {\n            this.numberInputRef = node;\n          }}\n          type=\"tel\"\n          className={inputClasses}\n          autoComplete={this.props.autoComplete}\n          pattern={this.props.pattern}\n          required={this.props.required}\n          placeholder={this.props.placeholder}\n          disabled={this.props.disabled}\n          {...otherProps}\n          data-test-id=\"src_reacttelephoneinput_test_id_5\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default enhanceWithClickOutside(ReactTelephoneInput);\n"],"names":["first","R","tail","formatNumber","text","pattern","autoFormat","length","formattedObject","split","reduce","acc","character","remainingText","formattedText","join","replaceCountryCode","currentSelectedCountry","nextSelectedCountry","number","dialCodeRegex","RegExp","dialCode","codeToBeReplaced","match","newNumber","replace","isNumberValid","inputNumber","countries","countryData","allCountries","any","country","startsWith","find","propEq","allCountryCodes","guessSelectedCountry","props","defaultCountry","onlyCountries","secondBestGuess","inputNumberForCountries","substr","bestGuess","trim","selectedCountry","iso2","priority","name","equals","findIndex","iso2Lookup","isModernBrowser","document","Boolean","createElement","setSelectionRange","keys","UP","DOWN","RIGHT","LEFT","ENTER","ESC","PLUS","A","Z","SPACE","getDropdownListWidth","defaultWidth","horizontalMargin","window","innerWidth","ReactTelephoneInput","skipFocus","input","numberInputRef","_fillDialCode","focus","len","value","e","disabled","preventDefault","preferredCountries","state","highlightCountryIndex","concat","setState","showDropDown","event","formattedNumber","newSelectedCountry","freezeSelection","target","nativeEvent","substring","format","caretPosition","selectionStart","oldFormattedText","diff","onChange","c","_cursorToEnd","onFocus","direction","newHighlightCountryIndex","memoize","queryString","probableCountries","filter","toLowerCase","probableCandidate","_searchCountry","probableCandidateIndex","metaKey","altKey","_moveHighlight","_getHighlightCountryIndex","which","handleFlagItemClick","String","fromCharCode","debouncedQueryStingSearcher","onEnterKeyPress","data","React","VirtualList","width","height","itemCount","itemSize","style","listStyle","className","scrollToIndex","scrollToAlignment","renderItem","index","itemClasses","classNames","listItemClassName","preferred","highlight","inputFlagClasses","key","onClick","bind","title","getFlagStyle","flagsImagePath","backgroundImage","onBlur","handleFlagDropdownClick","preferredCountriesFromProps","map","Object","prototype","hasOwnProperty","call","val","firstCall","debounce","searchCountry","componentDidMount","shouldComponentUpdate","nextProps","nextState","getDerivedStateFromProps","initialValue","selectedCountryGuess","selectedCountryGuessIndex","render","isValid","arrowClasses","arrow","up","inputClasses","flagViewClasses","buttonProps","otherProps","inputProps","inputId","id","onKeyDown","handleKeydown","handleFlagKeyDown","type","getCountryDropDownList","handleInput","handleInputClick","handleInputFocus","handleInputBlur","handleInputKeyDown","ref","node","autoComplete","required","placeholder","Component","zIndex","backgroundColor","enhanceWithClickOutside"],"mappings":"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"}